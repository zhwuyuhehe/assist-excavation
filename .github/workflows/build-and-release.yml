name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'main'
      - '1.20.1'
  pull_request:
    branches: [ main, 1.20.1 ]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: false
        type: string
      release_name:
        description: 'Release name'
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: [main, 1.20.1]
    outputs:
      main_mod_version: ${{ steps.extract_main.outputs.mod_version }}
      main_mc_version: ${{ steps.extract_main.outputs.mc_version }}
      main_mod_id: ${{ steps.extract_main.outputs.mod_id }}
      mc1201_mod_version: ${{ steps.extract_1201.outputs.mod_version }}
      mc1201_mc_version: ${{ steps.extract_1201.outputs.mc_version }}
      mc1201_mod_id: ${{ steps.extract_1201.outputs.mod_id }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ matrix.branch }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon --parallel

      - name: Extract project properties for main branch
        if: ${{ matrix.branch == 'main' }}
        id: extract_main
        run: |
          echo "::group::Extracting mod properties for main branch"
          MOD_VERSION=$(grep '^mod_version=' gradle.properties | cut -d= -f2)
          MC_VERSION=$(grep '^minecraft_version=' gradle.properties | cut -d= -f2)
          MOD_ID=$(jq -r '.id' src/main/resources/fabric.mod.json)
          echo "mod_version=$MOD_VERSION" >> $GITHUB_OUTPUT
          echo "mc_version=$MC_VERSION"  >> $GITHUB_OUTPUT
          echo "mod_id=$MOD_ID"          >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Extract project properties for 1.20.1 branch
        if: ${{ matrix.branch == '1.20.1' }}
        id: extract_1201
        run: |
          echo "::group::Extracting mod properties for 1.20.1 branch"
          MOD_VERSION=$(grep '^mod_version=' gradle.properties | cut -d= -f2)
          MC_VERSION=$(grep '^minecraft_version=' gradle.properties | cut -d= -f2)
          MOD_ID=$(jq -r '.id' src/main/resources/fabric.mod.json)
          echo "mod_version=$MOD_VERSION" >> $GITHUB_OUTPUT
          echo "mc_version=$MC_VERSION"  >> $GITHUB_OUTPUT
          echo "mod_id=$MOD_ID"          >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Rename JAR files
        run: |
          MOD_VERSION=$(grep '^mod_version=' gradle.properties | cut -d= -f2)
          MC_VERSION=$(grep '^minecraft_version=' gradle.properties | cut -d= -f2)
          MOD_ID=$(jq -r '.id' src/main/resources/fabric.mod.json)
          
          echo "Renaming JAR files for ${{ matrix.branch }} branch"
          echo "MOD_ID: $MOD_ID"
          echo "MOD_VERSION: $MOD_VERSION" 
          echo "MC_VERSION: $MC_VERSION"
          
          for file in build/libs/*.jar; do
            if [[ "$file" == *"-sources.jar" ]]; then
              new_name="${MOD_ID}-${MOD_VERSION}-mc${MC_VERSION}-sources.jar"
              echo "Renaming sources JAR: $file -> build/libs/$new_name"
              mv "$file" "build/libs/$new_name"
            else
              new_name="${MOD_ID}-${MOD_VERSION}-mc${MC_VERSION}.jar"
              echo "Renaming main JAR: $file -> build/libs/$new_name"
              mv "$file" "build/libs/$new_name"
            fi
          done
          
          echo "Files in build/libs after renaming:"
          ls -la build/libs/

      - name: Upload build artifacts for main branch
        if: ${{ matrix.branch == 'main' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-main
          path: build/libs/*.jar

      - name: Upload build artifacts for 1.20.1 branch
        if: ${{ matrix.branch == '1.20.1' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-1201
          path: build/libs/*.jar

  release:
    needs: build
    if: |
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Download main branch build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-main
          path: build/libs/main

      - name: Download 1.20.1 branch build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-1201
          path: build/libs/1201

      - name: List downloaded files
        run: |
          echo "Files in build/libs/main:"
          ls -la build/libs/main/
          echo "Files in build/libs/1201:"
          ls -la build/libs/1201/

      - name: Determine Release Tag & Name
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.release_tag }}" ]; then
            TAG=${{ github.event.inputs.release_tag }}
            NAME="${{ github.event.inputs.release_name }}"
          else
            TAG="v${{ needs.build.outputs.main_mod_version }}+mc${{ needs.build.outputs.main_mc_version }}"
            NAME="${{ needs.build.outputs.main_mod_id }}"
          fi
          echo "tag=$TAG"    >> $GITHUB_OUTPUT
          echo "name=$NAME"  >> $GITHUB_OUTPUT

      - name: Create Release Body
        id: release_info
        run: |
          # 设置北京时间
          TIMESTAMP=$(TZ='Asia/Shanghai' date +"%Y年%m月%d日 %H:%M:%S CST")
          cat > release_body.md <<EOF
          ## ${{ steps.vars.outputs.name }} 版本发布
          
          自动化发布于 $TIMESTAMP
          
          ### 包含的构建版本
          - 主分支 (Minecraft ${{ needs.build.outputs.main_mc_version }}): ${{ needs.build.outputs.main_mod_id }}-${{ needs.build.outputs.main_mod_version }}-mc${{ needs.build.outputs.main_mc_version }}.jar
          - 1.20.1 分支 (Minecraft 1.20.1): ${{ needs.build.outputs.mc1201_mod_id }}-${{ needs.build.outputs.mc1201_mod_version }}-mc${{ needs.build.outputs.mc1201_mc_version }}.jar
          
          ### 版本说明
          - 支持 Minecraft 1.20.1 和 1.21.4 两个版本
          - 完全兼容 Fabric 模组加载器
          - 每个版本均包含主 JAR 文件和源码 JAR 文件
          
          ### 安装说明
          1. 根据您的 Minecraft 版本选择对应的 JAR 文件下载
          2. 将下载的 JAR 文件放入 Minecraft 的 mods 文件夹中
          3. 启动 Minecraft 并使用 Fabric 模组加载器运行游戏
          
          ### 使用方法
          - 按 **Z** 键切换挖掘辅助功能的开启/关闭状态
          - 按 **V** 键打开配置界面，可自定义挖掘范围、延迟等参数
          
          ### 功能特性
          - 智能范围挖掘：支持矩形和圆形两种挖掘模式
          - 可配置延迟：可根据需要调整挖掘速度（0-40 刻）
          - 多语言支持：内置中文和英文界面
          - 快捷键自定义：支持自定义功能键位
          EOF
          echo "body_path=release_body.md" >> $GITHUB_OUTPUT

      - name: Move artifacts to single directory
        run: |
          mkdir -p build/libs/all
          cp build/libs/main/*.jar build/libs/all/
          cp build/libs/1201/*.jar build/libs/all/
          echo "Files in build/libs/all (to be released):"
          ls -la build/libs/all/

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.vars.outputs.tag }}
          name: ${{ steps.vars.outputs.name }}
          artifacts: build/libs/all/*.jar
          bodyFile: ${{ steps.release_info.outputs.body_path }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}